"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/TextToSpeech.js":
/*!************************************!*\
  !*** ./components/TextToSpeech.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TextToSpeech; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// import { useState, useEffect, useRef } from 'react';\n// export default function TextToSpeech() {\n//   const [audioMap, setAudioMap] = useState(null);\n//   const [lang, setLang] = useState('english');\n//   const audioRef = useRef(null);\n//   const [loading, setLoading] = useState(false);\n//   useEffect(() => {\n//     async function fetchUrls() {\n//       try {\n//         const res = await fetch(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/audio-urls/');\n//         const json = await res.json();\n//         setAudioMap(json);\n//       } catch (err) {\n//         console.error('Failed to fetch audio urls', err);\n//       }\n//     }\n//     fetchUrls();\n//   }, []);\n//   const play = async () => {\n//     if (!audioMap) return;\n//     const url = audioMap[lang];\n//     if (!url) return;\n//     setLoading(true);\n//     if (audioRef.current) audioRef.current.pause();\n//     audioRef.current = new Audio(url);\n//     audioRef.current.onended = () => setLoading(false);\n//     audioRef.current.onerror = () => setLoading(false);\n//     try { await audioRef.current.play(); } catch (e) { console.error('play failed', e); setLoading(false);}  };\n//   const download = () => {\n//     if (!audioMap) return;\n//     const url = audioMap[lang];\n//     if (!url) return;\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = `${lang}.mp3`;\n//     document.body.appendChild(a);\n//     a.click();\n//     a.remove();\n//   };\n//   return (\n//     <div className=\"tts-card\\\">\n//       <div className=\"tabs\\\">\n//         <button className=\"tab active\\\">Text to Speech</button>\n//         <button className=\"tab\\\">Agents</button>\n//         <button className=\"tab\\\">Music</button>\n//         <button className=\"tab\\\">Speech to Text</button>\n//         <button className=\"tab\\\">Dubbing</button>\n//         <button className=\"tab\\\">Voice Cloning</button>\n//         <button className=\"tab\\\">ElevenReader</button>\n//       </div>\n//       <div className=\"editor\\\">\n//         <textarea defaultValue={`In the ancient land of Eldoria, where skies shimmered and forests, whispered secrets to the wind, lived a dragon named Zephyros. Not the \\\"burn it all down\\\" kind... but he was gentle, wise, with eyes like old stars.`}></textarea>\n//       </div>\n//       <div className=\"controls\\\">\n//         <div className=\"left\\\">\n//           <select value={lang} onChange={(e) => setLang(e.target.value)}>\n//             <option value=\"english\\\">English</option>\n//             <option value=\"arabic\\\">Arabic</option>\n//           </select>\n//         </div>\n//         <div className=\"right\\\">\n//           <button className=\"icon\\\" onClick={play}>{loading ? 'Loading...' : 'Play â–¶'}</button>\n//           <button className=\"icon\\\" onClick={download}>Download â¤“</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\nvar _s = $RefreshSig$();\n\nfunction TextToSpeech() {\n    _s();\n    const [audioMap, setAudioMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [lang, setLang] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"english\");\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        async function fetchUrls() {\n            try {\n                const res = await fetch(\"http://localhost:8000/api/audio-urls/\" || 0);\n                const json = await res.json();\n                setAudioMap(json);\n                console.log(\"Fetched audio map:\", json); // ðŸ‘€ Debug\n            } catch (err) {\n                console.error(\"Failed to fetch audio urls\", err);\n            }\n        }\n        fetchUrls();\n    }, []);\n    const play = async ()=>{\n        if (!audioRef.current) audioRef.current = new Audio();\n        setLoading(true);\n        try {\n            const formData = new FormData();\n            formData.append(\"text\", document.querySelector(\"textarea\").value);\n            formData.append(\"lang\", lang === \"english\" ? \"en\" : \"ar\");\n            const res = await fetch(\"http://localhost:8000/api/generate-audio/\", {\n                method: \"POST\",\n                body: formData\n            });\n            if (!res.ok) throw new Error(\"Failed to generate audio\");\n            const blob = await res.blob();\n            const url = URL.createObjectURL(blob);\n            audioRef.current.src = url;\n            await audioRef.current.play();\n        } catch (err) {\n            console.error(\"play failed\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const download = async ()=>{\n        setLoading(true);\n        try {\n            const formData = new FormData();\n            formData.append(\"text\", document.querySelector(\"textarea\").value);\n            formData.append(\"lang\", lang === \"english\" ? \"en\" : \"ar\");\n            const res = await fetch(\"http://localhost:8000/api/generate-audio/\", {\n                method: \"POST\",\n                body: formData\n            });\n            if (!res.ok) throw new Error(\"Failed to generate audio\");\n            const blob = await res.blob();\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"\".concat(lang, \".mp3\");\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n            URL.revokeObjectURL(url); // cleanup\n        } catch (err) {\n            console.error(\"download failed\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n}\n_s(TextToSpeech, \"PS/IXNtNFhhA9ifUzPRPd6xo6MU=\");\n_c = TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/TextToSpeech.js\n"));

/***/ })

});